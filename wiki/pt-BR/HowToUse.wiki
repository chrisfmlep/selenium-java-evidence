#summary Esta pagina descreve como utilizar e criar suas proprias classes para criar um relatorio de evidencia.

<wiki:toc max_depth="4" />

= Introducao =
Ola! Bem vindo ao selenium-java-evidence. Sinta-se a vontade para nos informar sobre qualquer funcionalidade que voce deseja ou de qualquer bug que voce encontrar.

O uso dessa API e muito facil, basta seguir os passos abaixo:

== Passo 1 - Adicione o arquivo jar no seu projeto ==

Neste momento voce pode escolher qual arquivo jar colocar no seu classpath, existem dois:
    * [http://selenium-java-evidence.googlecode.com/files/selenium-java-evidence-onejar.zip selenium-java-evidence-onejar.zip]
    * [http://selenium-java-evidence.googlecode.com/files/selenium-java-evidence-with-libs.zip selenium-java-evidence-with-libs.zip]

O .zip com _onejar_ traz todas as bibliotecas utilizadas pela API embutidas em um unico arquivo jar. Com ele voce nao precisara utilizar outros arquivos .jar, somente um.

O .zip com _with-libs_ traz todas as bibliotecas utilizadas em uma pasta separada. Voce precisara colocar estas bibliotecas no seu classpath, alem do arquivo desta API.

Ambos arquivos trazem a seguinte estrutura
   * report
   * selenium-java-evidence.jar
   * init.properties

==== Pasta _report_ ====
A pasta _report_ contem dois exemplos de relatorios para voce utilizar com esta API
Se voce quiser criar o seu proprio relatorio, por favor vizualize a pagina CreateYourOwnReport

O relatorio que sera utilizado no arquivo de propriedades sera explicado depois.

==== selenium-java-evidence.jar ====
Esta e a biblioteca da API. Voce precisa coloca-la no seu classpath, independente se voce estiver baixado o zip _onejar_ ou _with-libs_

==== init.properties ==== 
Este arquivo contem as propriedades utilizadas no relatorio, em sua maioria os rotulos do relatorio.
Preste atencao nas propriedades de imagem, se voce as utilizar vai precisar colocar o caminho relativo a sua aplicacao, tomando como o diretorio inicial o da aplicacao.
Se voce nao deseja utilizar a(s) imagem(ns) no relatorio, coloque o valor _null_

*<font color="red">Don't forget: </font>* Se voce baixar o a .zip com _with-libs_, voce precisara colocar todas as bibliotecas da pasta _lib_ no seu classpath.

== Passo 2 - Usando a API no seu codigo ==
Voce sempre precisara colocar os codigos abaixo no seu codigo-fonte (nao necessariamente nesta ordem, mas precisara de todos):
   # importar o pacote {{{com.googlecode.seleniumjavaevidence.report.GenerateEvidenceReport;}}}
   # importar o pacote {{{com.googlecode.seleniumjavaevidence.report.SeleniumEvidence;}}}
   # criar uma variavel global {{{private List<SeleniumEvidence> evidence;}}} (voce pode escolher qualquer nome para ela ao inves de _evidence_)
   # criar uma variavel global para guardar a excecao se existir, atraves do codigo {{{String exString;}}}
   # criar a seguinte instancia no seu metodo *{{{setup()}}}*: {{{evidence = new ArrayList<SeleniumEvidence>();}}}
   # para cada evidencia que voce encontrar, coloque a seguinte linha de codigo: {{{evidence.add(new SeleniumEvidence("message", selenium.captureScreenshotToString()));}}}
   # voce precisa colocar todo o codigo sobre um bloco {{{try-catch}}} para poder pegar a excecao e capturar a imagem de erro ou do ultimo passo executado...
     * coloque dentro do bloco {{{catch}}} o seguinte codigo {{{evidence.add(new SeleniumEvidence("fail message", selenium.captureScreenshotToString()));}}} e em um nova linha o seguinte codigo {{{exString = e.fillInStackTrace().getMessage();}}}
     * coloque dentro do bloco {{{finally}}} o seguinte codigo: {{{GenerateEvidenceReport evidenceReport.generatePDFEvidence(evidence, exString);}}}     

*Abaixo um exemplo de classe usando a API*	 

{{{
import com.googlecode.seleniumjavaevidence.report.GenerateEvidenceReport;
import com.googlecode.seleniumjavaevidence.selenium.SeleniumEvidence;
import com.thoughtworks.selenium.*;
import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.server.SeleniumServer;

public class TestExample extends junit.framework.TestCase {

    private Selenium selenium;
    private SeleniumServer seleniumServer;
    private List<SeleniumEvidence> evidence;
    String exString;

    @Override
    public void setUp() throws Exception {
        evidence = new ArrayList<SeleniumEvidence>();
        seleniumServer = new SeleniumServer();
        selenium = new DefaultSelenium("localhost", 4444, "*firefox3", "http://localhost/");
        seleniumServer.start();
        selenium.start();
    }

    @Override
    public void tearDown() throws Exception {
        selenium.stop();
        seleniumServer.stop();
    }

    public void testLink() throws Exception {
        try {
            //your selenium test here
            evidence.add(new SeleniumEvidence("get evidence from here", selenium.captureScreenshotToString()));
        } catch (Exception e) {
            evidence.add(new SeleniumEvidence("Unexpected error", selenium.captureScreenshotToString()));
            exString = e.fillInStackTrace().getMessage();
        } finally {
            GenerateEvidenceReport.generatePDFEvidence(evidence, exString);
        }

    }
}
}}}

=== Nao esqueca ===
   * Voce deve ter a api no classpath
   * Voce precisa ter o diretorio _report_ na raiz do diretorio da aplicacao
   * Voce precisa ter o arquivo _init.properties_ na raiz do diretorio da aplicacao
   * Se voce nao for utilizar imagens no relatorio, coloque o valor como _null_ caso contrario insira o caminho das imagens utilizando a pasta da aplicacao como inicio